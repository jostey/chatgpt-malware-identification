import argparse
import hashlib
import json
import sys

import openai
import pefile

# VAR INPUT EXAMPLE
INPUT = ""
openai.api_key = ""  # https://platform.openai.com/account/api-keys


def get_imported_symbols(filename: str):
	imports = ""
	pe = pefile.PE(filename)
	imphash = pe.get_imphash()
	for entry in pe.DIRECTORY_ENTRY_IMPORT:
		imports += entry.dll.decode('ascii') + ' '
		for imp in entry.imports:
			imports += imp.name.decode('ascii') + ' '
	return imports, imphash


def get_hashes(filename: str, imphash: str):
	with open(filename, "rb") as f:
		file_content = f.read()
	hash_object = hashlib.sha256(file_content)
	hex_dig = hash_object.hexdigest()
	print("SHA256 search in vt:  {}: https://www.virustotal.com/gui/file/{}".format(filename, hex_dig))
	print('Search imphash in web:  {}: https://www.hybrid-analysis.com/search?query=imphash:{}'.format(filename,
	                                                                                                   imphash))


def generate_prompt(input: str) -> str:
	return """
    Q: Tell me if the following code is malicious. In JSON format
    $$$ START CODE
    print("Hello")
    $$$ END CODE
    A: {{"malware": "0", "reason": "There is no indication that this code is malicious. It is a code in which the word "Hello" is printed."}}
    Q: Tell me if the following code is malicious. In JSON format
    $$$ START CODE

    $$$ END CODE
    A: {{"malware": "0", "reason": "This code is empty and serves no purpose"}}
    Q: Tell me if the following code is malicious. In JSON format 
    $$$ START CODE
    {}
    $$$ END CODE
    A: """.format(input)


def completion_create(input: str):
	completion = openai.ChatCompletion.create(
		model = "gpt-3.5-turbo",
		messages = [{"role": "user", "content": generate_prompt(input)}]
	)
	return completion


def is_malware(input: str):
	completion = completion_create(input)
	response = json.loads(completion.choices[0].message.content)
	if response['malware'] == '1':
		print("[+] Malware detected!")
		print("[+] Reason:", response['reason'])
		return True
	else:
		print(
			"[-] We did not find any signs of malware in that file. If you believe the file is not trustworthy, please check this data on VirusTotal.\n\thttps://www.virustotal.com/gui/home/search")
		return False


def open_file(filename: str):
	try:
		with open(filename, 'r') as filecode:
			data = filecode.read()
		return data
	except FileNotFoundError:
		print(f'[!] I cant find the file named {filename}')
	except:
		print('[!] File read failed!')


if __name__ == "__main__":
	parser = argparse.ArgumentParser(
		description = 'Malware identification with OpenAI')
	parser.add_argument(
		"--string", help = "Read the code from the command line. The code has to be between quotation")
	parser.add_argument("--file", help = "Read the code from a file")
	parser.add_argument("--imports", help = "Analyze the imports from malware")
	if len(sys.argv) == 1:
		parser.print_help(sys.stderr)
		sys.exit(1)
	args = parser.parse_args()
	if args.string:
		is_malware(args.string)
	if args.file:
		print("[*] Analyzing file:", args.file)
		input_data = open_file(args.file)
		is_malware(input_data)
	if args.imports:
		input_data, imphash = get_imported_symbols(args.imports)
		print("[*] Analyzing file:", args.imports)
		malware = is_malware(input_data)
		get_hashes(args.imports, imphash)
